% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/epsLasso.R
\name{epsLasso}
\alias{epsLasso}
\title{Test for high-dimensional sparse regression for extreme phenotype sampling data.}
\usage{
epsLasso(X, Y, c1, c2, lam0 = NULL, m_w = "lso", scal = TRUE,
  paral = FALSE, paral_n = NULL, resol = 1.3, tol = 0.001,
  maxTry = 10, verbose = TRUE)
}
\arguments{
\item{X}{Matrix of predictors. Required.}

\item{Y}{Trait values. Required.}

\item{c1}{Right censored point. Required.}

\item{c2}{Left censored point. Required.}

\item{lam0}{A sequence of lambda values. Default is the sequence used in GLMNET.}

\item{m_w}{Methods used to estimate W matrix. Default is "lso" for LASSO solution using glmnet. Another method is "dzg" for Danzig-type estimator.}

\item{scal}{Scale matrix X or not. Default is TRUE.}

\item{paral}{Parallel computing indicator. Default is FALSE, not using parallel.}

\item{paral_n}{Number of cores that are used for parallel computing. Default is NULL. When paral is TRUE, default is the number of system available cores - 1.}

\item{resol}{The refining step when m_w="dzg". Default is 1.3. A large resol results in faster convergence speed, but rough solutions.}

\item{tol}{The convergence threshold for refining when m_w="dzg". Default is 0.001.}

\item{maxTry}{The maximum refining steps when m_w="dzg". Default is 10.}

\item{verbose}{Print debugging info or not.}
}
\description{
This function tests the effects of predictors modelled jointly for high-dimensional extreme phenotype sampling data.
}
\examples{
library(mvtnorm)
sd=1
n=100
p1=0.2
p2=0.2
p=100
nc=10
eff=0.5

beta_eff=c(rep(eff,nc),rep(0,p-nc))

cov_m=diag(p)
X_b=rmvnorm(n,mean=c(rep(1,p/2),rep(2,p/2)), sigma=cov_m)
Y_b=X_b\%*\%beta_eff+rnorm(n,0,sd)
sample_threshold_low=ceiling(n*p1)
sample_threshold_up=ceiling(n*p2)

ind_sample = order(Y_b)[c(1:sample_threshold_low,(n-sample_threshold_up+1):n)]
Y_p = Y_b[ind_sample]
c1 = min(Y_b[ind_sample[-(1:sample_threshold_low)]])
c2 = max(Y_b[ind_sample[1:sample_threshold_low]])
X_p = X_b[ind_sample,]

res=epsLasso(X_p,Y_p,c1,c2)
res

}
